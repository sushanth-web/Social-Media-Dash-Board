/* @mixin is like a function we created a mixin named breakpoint just like a function it also has parameters we created a 
parameter to the mixin called $size. @mixin genrally loads reusable code you wanna use again we create it with keyword @mixin
when inside mixin is the code you dont wanna type in everytime. inside mixin we created a media query min width so it runs when 
the width reaches the specified min width and to get the min width from the specified breakpoints above the mixin we used a method
called map-get so it gets the specified min width,the first parameter in this method is breakpoints-up so it takes the min width 
values from breakpoints-up which we have specifies above and the second parameter is size which takes the size from breakpoints-up and stores 
it as min-width the size indicates small,large,xlarge and its value. @content is the content you wanna run when the webpage reaches the psecified size */
/* h1{
    @include breakpoint(large){
        font-size: 3rem;
    }
}//so when the size of page reaches the min-width large i.e, 64em h1's font size becomes 3rem
//example of how the above code would look like if it was in normal css
@media(min-width:64em){
    h1{
        font-size: 3rem;
    }
} */
/* h1{
    font-size: rem(32);//we have given input as 32 pixels which is 2 rems
}
//what it is going to look like in normal css
h1{
    font-size: 2rem;
} */
.toggle {
  display: grid;
  grid-template-columns: 1fr 3rem;
  border: none;
  gap: 0.3rem 0.5rem;
  margin: 0;
}
.toggle label {
  font-size: 0.875rem;
  cursor: pointer;
  color: var(--toggle);
  font-weight: 700;
}
.toggle label[for=dark] {
  line-height: 1.5rem;
  margin-right: 0.3125rem;
}
.toggle__wrapper {
  height: 1.5rem;
  position: relative;
  display: flex;
}
.toggle input[type=radio] {
  opacity: 0;
  margin: 0 2px 0px 2px;
  top: 0;
  width: 1.5rem;
  height: 1.5rem;
  position: relative;
  z-index: 2;
  cursor: pointer;
}
.toggle input[type=radio]:focus ~ .toggle__button {
  border: 2px solid white;
}
.toggle__background {
  display: block;
  height: 100%;
  position: absolute;
  width: 100%;
  top: 0;
  border-radius: 0.75rem;
  background: var(--toggle-bg);
  z-index: 0;
}
.toggle__button {
  position: absolute;
  left: 0.1875rem;
  top: 0.1875rem;
  width: 1.125rem;
  height: 1.125rem;
  border-radius: 50%;
  background-color: var(--toggle-circle);
  transition: left 0.3 ease;
  z-index: 1;
}
.toggle #dark:checked ~ .toggle__button {
  left: 0.1875rem;
  right: auto;
}
.toggle #light:checked ~ .toggle__button {
  left: auto;
  right: 0.1875rem;
}/*# sourceMappingURL=toggle.css.map */